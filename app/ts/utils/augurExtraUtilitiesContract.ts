/*
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.26;

interface IMarket {
    function isForkingMarket() external view returns (bool);
    function participants(uint256 index) external view returns (IReportingParticipant);
}

interface IReportingParticipant {
    function fork() external;
    function redeem(address sebdTo) external returns (bool);
    function getSize() external view returns (uint256);
    function getStake() external view returns (uint256);
    function getPayoutNumerators() external view returns (uint256[] memory);
}

interface IDisputeCrowdsourcer {
    function getMarket() external view returns (IMarket);
    function balanceOf(address owner) external view returns (uint256);
}

contract AugurExtraUtilities {
    struct ReportingParticipant {
        uint256 size;
        uint256 stake;
        uint256[] payoutNumerators;
    }
    struct StakeData {
        IMarket market;
        IDisputeCrowdsourcer bond;
        uint256 amount;
    }

    function exists(address _address) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(_address) }
        return size > 0;
    }

    function getAvailableDisputesFromForkedMarkets(address _disputeCrowdsourcerFactory, address _account, uint256 _offset, uint256 _num) external view returns (StakeData[] memory _data, bool _done) {
        _data = new StakeData[](_num);
        for (uint256 _i = 0; _i < _num; _i++) {
            address _disputeBondAddress = addressFrom(_disputeCrowdsourcerFactory, _offset +_i + 1);
            if (!exists(_disputeBondAddress)) {
                return (_data, true);
            }
            IDisputeCrowdsourcer _bond = IDisputeCrowdsourcer(_disputeBondAddress);
            IMarket _market = _bond.getMarket();
            if (_market == IMarket(address(0x0)) || !_market.isForkingMarket()) {
               continue;
            }
            _data[_i].bond = _bond;
            _data[_i].market = _market;
            _data[_i].amount = _bond.balanceOf(_account);
        }
    }

    function forkAndRedeemReportingParticipants(IReportingParticipant[] memory _reportingParticipants) public returns (bool) {
        for (uint256 i = 0; i < _reportingParticipants.length; i++) {
            _reportingParticipants[i].fork();
            _reportingParticipants[i].redeem(msg.sender);
        }
        return true;
    }

    function addressFrom(address _origin, uint _nonce) public pure returns (address) {
        if(_nonce == 0x00)       return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), _origin, bytes1(0x80)))))));
        if(_nonce <= 0x7f)       return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), _origin, bytes1(uint8(_nonce))))))));
        if(_nonce <= 0xff)       return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), _origin, bytes1(0x81), uint8(_nonce)))))));
        if(_nonce <= 0xffff)     return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xd8), bytes1(0x94), _origin, bytes1(0x82), uint16(_nonce)))))));
        if(_nonce <= 0xffffff)   return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), _origin, bytes1(0x83), uint24(_nonce)))))));
        if(_nonce <= 0xffffffff) return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xda), bytes1(0x94), _origin, bytes1(0x84), uint32(_nonce)))))));
		return address(uint160(uint256((keccak256(abi.encodePacked(bytes1(0xdb), bytes1(0x94), _origin, bytes1(0x85), uint40(_nonce))))))); // more than 2^40 nonces not realistic
    }

    function getReportingParticipantsForMarket(IMarket _market, uint256 _offset, uint256 _num) external view returns (ReportingParticipant[] memory _data, bool _done) {
        _data = new ReportingParticipant[](_num);
        for (uint256 _i = 0; _i < _num; _i++) {
            IReportingParticipant _participant = _market.participants(_offset + _i);
            if (!exists(address(_participant))) {
                return (_data, true);
            }
            _data[_i].size = _participant.getSize();
            _data[_i].stake = _participant.getStake();
            _data[_i].payoutNumerators = _participant.getPayoutNumerators();
        }
    }
}
*/
export const AUGUR_EXTRA_UTILITIES_BYTECODE = '0x6080604052348015600e575f80fd5b5061192d8061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80633be4af0e1461004e578063e89f82671461007f578063fbf551ad146100b0578063ff82c64d146100e0575b5f80fd5b61006860048036038101906100639190610b54565b610110565b604051610076929190610d44565b60405180910390f35b61009960048036038101906100949190610dad565b610431565b6040516100a7929190610fad565b60405180910390f35b6100ca60048036038101906100c59190610fdb565b6106fe565b6040516100d79190611028565b60405180910390f35b6100fa60048036038101906100f591906111cc565b61090d565b6040516101079190611213565b60405180910390f35b60605f8267ffffffffffffffff81111561012d5761012c611055565b5b60405190808252806020026020018201604052801561016657816020015b610153610a4d565b81526020019060019003908161014b5790505b5091505f5b83811015610426575f61019588600184896101869190611259565b6101909190611259565b6106fe565b90506101a081610a3c565b6101b257836001935093505050610428565b5f8190505f8173ffffffffffffffffffffffffffffffffffffffff1663f1be16796040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061022491906112a0565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806102ca57508073ffffffffffffffffffffffffffffffffffffffff1663d372fbcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102c891906112f5565b155b156102d757505050610419565b818685815181106102eb576102ea611320565b5b60200260200101516020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508086858151811061033d5761033c611320565b5b60200260200101515f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016103b39190611028565b602060405180830381865afa1580156103ce573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f29190611361565b86858151811061040557610404611320565b5b602002602001015160400181815250505050505b808060010191505061016b565b505b94509492505050565b60605f8267ffffffffffffffff81111561044e5761044d611055565b5b60405190808252806020026020018201604052801561048757816020015b610474610a97565b81526020019060019003908161046c5790505b5091505f5b838110156106f4575f8673ffffffffffffffffffffffffffffffffffffffff166335c1d34983886104bd9190611259565b6040518263ffffffff1660e01b81526004016104d9919061139b565b602060405180830381865afa1580156104f4573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051891906113c8565b905061052381610a3c565b610535578360019350935050506106f6565b8073ffffffffffffffffffffffffffffffffffffffff1663de8fa4316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a29190611361565b8483815181106105b5576105b4611320565b5b60200260200101515f0181815250508073ffffffffffffffffffffffffffffffffffffffff1663fc0e3d906040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106319190611361565b84838151811061064457610643611320565b5b602002602001015160200181815250508073ffffffffffffffffffffffffffffffffffffffff16636f84676e6040518163ffffffff1660e01b81526004015f60405180830381865afa15801561069c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906106c491906114b3565b8483815181106106d7576106d6611320565b5b60200260200101516040018190525050808060010191505061048c565b505b935093915050565b5f8082036107485760d660f81b609460f81b84608060f81b604051602001610729949392919061158a565b604051602081830303815290604052805190602001205f1c9050610907565b607f82116107915760d660f81b609460f81b848460f81b604051602001610772949392919061158a565b604051602081830303815290604052805190602001205f1c9050610907565b60ff82116107dd5760d760f81b609460f81b84608160f81b856040516020016107be959493929190611617565b604051602081830303815290604052805190602001205f1c9050610907565b61ffff821161082a5760d860f81b609460f81b84608260f81b8560405160200161080b9594939291906116b6565b604051602081830303815290604052805190602001205f1c9050610907565b62ffffff82116108785760d960f81b609460f81b84608360f81b85604051602001610859959493929190611756565b604051602081830303815290604052805190602001205f1c9050610907565b63ffffffff82116108c75760da60f81b609460f81b84608460f81b856040516020016108a89594939291906117f7565b604051602081830303815290604052805190602001205f1c9050610907565b60db60f81b609460f81b84608560f81b856040516020016108ec959493929190611899565b604051602081830303815290604052805190602001205f1c90505b92915050565b5f805f90505b8251811015610a325782818151811061092f5761092e611320565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634591c0606040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561097b575f80fd5b505af115801561098d573d5f803e3d5ffd5b505050508281815181106109a4576109a3611320565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166395a2251f336040518263ffffffff1660e01b81526004016109e49190611028565b6020604051808303815f875af1158015610a00573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a2491906112f5565b508080600101915050610913565b5060019050919050565b5f80823b90505f8111915050919050565b60405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81525090565b60405180606001604052805f81526020015f8152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610af082610ac7565b9050919050565b610b0081610ae6565b8114610b0a575f80fd5b50565b5f81359050610b1b81610af7565b92915050565b5f819050919050565b610b3381610b21565b8114610b3d575f80fd5b50565b5f81359050610b4e81610b2a565b92915050565b5f805f8060808587031215610b6c57610b6b610abf565b5b5f610b7987828801610b0d565b9450506020610b8a87828801610b0d565b9350506040610b9b87828801610b40565b9250506060610bac87828801610b40565b91505092959194509250565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f819050919050565b5f610c04610bff610bfa84610ac7565b610be1565b610ac7565b9050919050565b5f610c1582610bea565b9050919050565b5f610c2682610c0b565b9050919050565b610c3681610c1c565b82525050565b5f610c4682610c0b565b9050919050565b610c5681610c3c565b82525050565b610c6581610b21565b82525050565b606082015f820151610c7f5f850182610c2d565b506020820151610c926020850182610c4d565b506040820151610ca56040850182610c5c565b50505050565b5f610cb68383610c6b565b60608301905092915050565b5f602082019050919050565b5f610cd882610bb8565b610ce28185610bc2565b9350610ced83610bd2565b805f5b83811015610d1d578151610d048882610cab565b9750610d0f83610cc2565b925050600181019050610cf0565b5085935050505092915050565b5f8115159050919050565b610d3e81610d2a565b82525050565b5f6040820190508181035f830152610d5c8185610cce565b9050610d6b6020830184610d35565b9392505050565b5f610d7c82610ae6565b9050919050565b610d8c81610d72565b8114610d96575f80fd5b50565b5f81359050610da781610d83565b92915050565b5f805f60608486031215610dc457610dc3610abf565b5b5f610dd186828701610d99565b9350506020610de286828701610b40565b9250506040610df386828701610b40565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f610e5a8383610c5c565b60208301905092915050565b5f602082019050919050565b5f610e7c82610e26565b610e868185610e30565b9350610e9183610e40565b805f5b83811015610ec1578151610ea88882610e4f565b9750610eb383610e66565b925050600181019050610e94565b5085935050505092915050565b5f606083015f830151610ee35f860182610c5c565b506020830151610ef66020860182610c5c565b5060408301518482036040860152610f0e8282610e72565b9150508091505092915050565b5f610f268383610ece565b905092915050565b5f602082019050919050565b5f610f4482610dfd565b610f4e8185610e07565b935083602082028501610f6085610e17565b805f5b85811015610f9b5784840389528151610f7c8582610f1b565b9450610f8783610f2e565b925060208a01995050600181019050610f63565b50829750879550505050505092915050565b5f6040820190508181035f830152610fc58185610f3a565b9050610fd46020830184610d35565b9392505050565b5f8060408385031215610ff157610ff0610abf565b5b5f610ffe85828601610b0d565b925050602061100f85828601610b40565b9150509250929050565b61102281610ae6565b82525050565b5f60208201905061103b5f830184611019565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61108b82611045565b810181811067ffffffffffffffff821117156110aa576110a9611055565b5b80604052505050565b5f6110bc610ab6565b90506110c88282611082565b919050565b5f67ffffffffffffffff8211156110e7576110e6611055565b5b602082029050602081019050919050565b5f80fd5b5f61110682610ae6565b9050919050565b611116816110fc565b8114611120575f80fd5b50565b5f813590506111318161110d565b92915050565b5f611149611144846110cd565b6110b3565b9050808382526020820190506020840283018581111561116c5761116b6110f8565b5b835b8181101561119557806111818882611123565b84526020840193505060208101905061116e565b5050509392505050565b5f82601f8301126111b3576111b2611041565b5b81356111c3848260208601611137565b91505092915050565b5f602082840312156111e1576111e0610abf565b5b5f82013567ffffffffffffffff8111156111fe576111fd610ac3565b5b61120a8482850161119f565b91505092915050565b5f6020820190506112265f830184610d35565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61126382610b21565b915061126e83610b21565b92508282019050808211156112865761128561122c565b5b92915050565b5f8151905061129a81610d83565b92915050565b5f602082840312156112b5576112b4610abf565b5b5f6112c28482850161128c565b91505092915050565b6112d481610d2a565b81146112de575f80fd5b50565b5f815190506112ef816112cb565b92915050565b5f6020828403121561130a57611309610abf565b5b5f611317848285016112e1565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8151905061135b81610b2a565b92915050565b5f6020828403121561137657611375610abf565b5b5f6113838482850161134d565b91505092915050565b61139581610b21565b82525050565b5f6020820190506113ae5f83018461138c565b92915050565b5f815190506113c28161110d565b92915050565b5f602082840312156113dd576113dc610abf565b5b5f6113ea848285016113b4565b91505092915050565b5f67ffffffffffffffff82111561140d5761140c611055565b5b602082029050602081019050919050565b5f61143061142b846113f3565b6110b3565b90508083825260208201905060208402830185811115611453576114526110f8565b5b835b8181101561147c5780611468888261134d565b845260208401935050602081019050611455565b5050509392505050565b5f82601f83011261149a57611499611041565b5b81516114aa84826020860161141e565b91505092915050565b5f602082840312156114c8576114c7610abf565b5b5f82015167ffffffffffffffff8111156114e5576114e4610ac3565b5b6114f184828501611486565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b61153f61153a826114fa565b611525565b82525050565b5f8160601b9050919050565b5f61155b82611545565b9050919050565b5f61156c82611551565b9050919050565b61158461157f82610ae6565b611562565b82525050565b5f611595828761152e565b6001820191506115a5828661152e565b6001820191506115b58285611573565b6014820191506115c5828461152e565b60018201915081905095945050505050565b5f60ff82169050919050565b5f8160f81b9050919050565b5f6115f9826115e3565b9050919050565b61161161160c826115d7565b6115ef565b82525050565b5f611622828861152e565b600182019150611632828761152e565b6001820191506116428286611573565b601482019150611652828561152e565b6001820191506116628284611600565b6001820191508190509695505050505050565b5f61ffff82169050919050565b5f8160f01b9050919050565b5f61169882611682565b9050919050565b6116b06116ab82611675565b61168e565b82525050565b5f6116c1828861152e565b6001820191506116d1828761152e565b6001820191506116e18286611573565b6014820191506116f1828561152e565b600182019150611701828461169f565b6002820191508190509695505050505050565b5f62ffffff82169050919050565b5f8160e81b9050919050565b5f61173882611722565b9050919050565b61175061174b82611714565b61172e565b82525050565b5f611761828861152e565b600182019150611771828761152e565b6001820191506117818286611573565b601482019150611791828561152e565b6001820191506117a1828461173f565b6003820191508190509695505050505050565b5f63ffffffff82169050919050565b5f8160e01b9050919050565b5f6117d9826117c3565b9050919050565b6117f16117ec826117b4565b6117cf565b82525050565b5f611802828861152e565b600182019150611812828761152e565b6001820191506118228286611573565b601482019150611832828561152e565b60018201915061184282846117e0565b6004820191508190509695505050505050565b5f64ffffffffff82169050919050565b5f8160d81b9050919050565b5f61187b82611865565b9050919050565b61189361188e82611855565b611871565b82525050565b5f6118a4828861152e565b6001820191506118b4828761152e565b6001820191506118c48286611573565b6014820191506118d4828561152e565b6001820191506118e48284611882565b600582019150819050969550505050505056fea26469706673582212206302d00f7c21c28fb848b127f4121c8fe944e97a5024b488a4807aa08e15370564736f6c634300081a0033'
